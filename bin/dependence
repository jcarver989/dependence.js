#!/usr/bin/env ruby
require 'rubygems'
require 'fileutils'
require 'coffee-script'
require 'dependence'
require 'optparse'

class DependenceCompiler
  def initialize(config)
    @config = config
    @src_glob = "**/*.#{@config[:type]}"
    @concatenator = Dependence::Concatenator.new(
      :load_path => @config[:src_dir],
      :source_type => @src_glob
    )
  end

  def compile
    @config[:watch] ? compile_with_watcher : run_compile
  end

  private

  def compile_with_watcher
    FileWatcher.new(:load_path => @config[:src_dir],  :glob_str => @src_glob) do
      run_compile
    end
  end

  def run_compile
    begin
      @concatenator.concat do |module_name, module_content|
        stdout_compile_msg(module_name)
        FileUtils::mkdir_p @config[:output]
        output = File.join(@config[:output], "#{module_name}.js")
        compiled = compile_code(module_content)
        compiled = ModuleInjector.modularize(module_name, compiled) unless @config[:bare]
        File.open(output, 'w') { |f| f.syswrite compiled }

        stdout_compile_complete_msg(module_name, output)
        compress_code(output) if @config[:compress]
      end

    rescue => e
      puts Colors.red("Error during processing, exiting.")
      raise e
    end
  end


  def stdout_compile_msg(module_name)
    puts ""
    puts "================================"
    puts Colors.green("Detected Module: #{module_name}")
    puts "================================"
  end

  def stdout_compile_complete_msg(module_name, output)
    puts Colors.green("Compiled #{module_name} to #{output}")
  end

  def compile_code(raw_code)
    return CoffeeScript.compile(raw_code, :bare => true) if @config[:type] == "coffee"
    raw_code
  end

  def compress_code(source_file)
    JsCompiler.new(source_file).compile
  end
end


options = {
  :output   => ".",
  :type     => "js",
  :watch    => false,
  :bare     => false,
  :compress => false
}

OptionParser.new do |opts|
  opts.banner = "Usage: src_dir [options]"

  opts.on("-o", "--output DIR", "Output directory, defaults to '.'") do |dir|
    options[:output] = dir
  end

  opts.on("-t", "--type TYPE", "Source file extension [js, coffee]") do |type|
    options[:type] = type
  end

  opts.on("-w", "--watch", "Watch src_dir for changes and recompile") do |bool|
    options[:watch] = bool
  end

  opts.on("-b", "--bare", "Do not wrap modules in closures with export var") do |bool|
    options[:bare] = bool
  end

  opts.on("-c", "--compress", "Compress output with Googles Closure compiler") do |bool|
    options[:compress] = bool
  end

end.parse(ARGV)

if ARGV.length < 1
  puts "You need a src directory to compile from!"
  exit 1
elsif !File.directory? ARGV[0]
  puts "#{ARGV[0]} is not a directory!"
  exit 1
end

options[:src_dir] = ARGV[0]


compiler = DependenceCompiler.new options
compiler.compile

